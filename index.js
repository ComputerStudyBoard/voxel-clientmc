// Generated by CoffeeScript 1.6.3
(function() {
  var ClientMC, ever, minecraft_protocol, websocket_stream, zlib;

  websocket_stream = require('websocket-stream');

  minecraft_protocol = require('minecraft-protocol');

  ever = require('ever');

  zlib = require('zlib-browserify');

  module.exports = function(game, opts) {
    return new ClientMC(game, opts);
  };

  ClientMC = (function() {
    function ClientMC(game, opts) {
      var _base;
      this.game = game;
      this.opts = opts;
      if ((_base = this.opts).url == null) {
        _base.url = 'ws://localhost:1234';
      }
      this.enable();
    }

    ClientMC.prototype.enable = function() {
      var _this = this;
      this.ws = websocket_stream(this.opts.url, {
        type: Uint8Array
      });
      this.ws.on('error', function(err) {
        return console.log('WebSocket error', err);
      });
      return this.ws.on('data', function(data) {
        var packet;
        packet = _this.decodePacket(data);
        if (packet == null) {
          return;
        }
        return _this.handlePacket(packet.name, packet.payload);
      });
    };

    ClientMC.prototype.disable = function() {
      return this.ws.end();
    };

    ClientMC.prototype.handlePacket = function(name, payload) {
      var compressed;
      console.log('got', name, payload);
      debugger;
      if (name === 'map_chunk_bulk') {
        console.log(payload);
        compressed = payload.data.compressedChunkData;
        console.log('map_chunk_bulk', compressed.length);
        return zlib.inflate(compressed, function(err, result) {
          var addArray, at, biomeArray, chunksData, groundUpContinuous, lightArray, maxLength, metaArray, miniChunks, skyArray, skyLightSent, typeArray;
          console.log('  decomp', result.length);
          console.log(result);
          chunksData = new Uint8Array(result);
          at = 0;
          miniChunks = [];
          maxLength = result.length;
          skyLightSent = payload.skyLightSent;
          groundUpContinuous = true;
          while (at < maxLength) {
            typeArray = chunksData.subarray(at, at += 16 * 16 * 16 * 1);
            metaArray = chunksData.subarray(at, at += 16 * 16 * 16 / 2);
            lightArray = chunksData.subarray(at, at += 16 * 16 * 16 / 2);
            if (skyLightSent) {
              skyArray = chunksData.subarray(at, at += 16 * 16 * 16 / 2);
            }
            addArray = chunksData.subarray(at, at += 16 * 16 * 16 / 2);
            if (groundUpContinuous) {
              biomeArray = chunksData.subarray(at, at += 256);
            }
            miniChunks.push({
              types: typeArray
            });
          }
          window.result = result;
          window.x = this;
          debugger;
        });
      }
    };

    ClientMC.prototype.decodePacket = function(data) {
      var buffer, id, name, payload, result;
      if (!(data instanceof Uint8Array)) {
        return void 0;
      }
      data._isBuffer = true;
      buffer = new Buffer(data);
      result = minecraft_protocol.protocol.parsePacket(buffer);
      if (!result || result.error) {
        console.log('protocol parse error: ' + JSON.stringify(result.error));
        return void 0;
      }
      payload = result.results;
      id = result.results.id;
      name = minecraft_protocol.protocol.packetNames[minecraft_protocol.protocol.states.PLAY].toClient[id];
      return {
        name: name,
        id: id,
        payload: payload
      };
    };

    return ClientMC;

  })();

}).call(this);
